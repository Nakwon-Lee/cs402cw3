(define-fun mydiv ((x Int) (y Int)) Int (if (not (= y 0)) (div x y) 0))
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const temp$0 Int)
(declare-const temp$1 Int)
(declare-const temp$2 Int)
(declare-const temp$3 Int)
(declare-const k Int)
(declare-const temp$4 Int)
(declare-const temp$5 Int)
(declare-const temp$6 Int)
(declare-const temp$7 Int)
(declare-const temp$9 Int)
(declare-const k_1 Int)
(declare-const z_1 Int)
(declare-const z_2 Int)
(declare-const k_2 Int)
(declare-const temp$8 Bool)
(assert (=> true (= temp$0 x)))
(assert (=> true (= temp$1 (* 32 y))))
(assert (=> true (= temp$2 (+ temp$0 3))))
(assert (=> true (= temp$3 (- temp$2 temp$1))))
(assert (=> true (= z temp$3)))
(assert (=> true (= temp$4 (-  3))))
(assert (=> true (= temp$5 (+ temp$4 x))))
(assert (=> true (= k temp$5)))
(assert (=> (and (not (>= x y)) (= k 3)) (= temp$6 (mydiv k x))))
(assert (=> (and (not (>= x y)) (= k 3)) (= k_1 temp$6)))
(declare-const tempbool0 Bool)
(assert (= (and (not (>= x y)) (= k 3)) tempbool0))
(assert (=> (or (>= x y) (and (not (>= x y)) (not (= k 3)))) (= temp$7 (- z 2))))
(declare-const tempbool1 Bool)
(assert (= (or (>= x y) (and (not (>= x y)) (not (= k 3)))) tempbool1))
(assert (=> (or (>= x y) (and (not (>= x y)) (not (= k 3)))) (= z_1 temp$7)))
(assert (=> true (=> tempbool0 (= z_2 z))))
(assert (=> true (=> tempbool1 (= z_2 z_1))))
(assert (=> true (=> tempbool0 (= k_2 k_1))))
(assert (=> true (=> tempbool1 (= k_2 k))))
(assert (=> true (= temp$9 (- z_2 y))))
(assert (not (or (and (> temp$9 0) (< k_2 0)) (and (or (not (> temp$9 0)) (and (> temp$9 0) (not (< k_2 0)))) (< z_2 0)))))
(check-sat)
(get-value (y x))
